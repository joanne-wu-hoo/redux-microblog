## Thursday August 8th To-do
0. Refactor BlogPost - make CommentForm its own component
1. Get redux reducer, action_types, actions set up
2. Refactor for redux
3. Tests for reducer & action_types, and ideally App

---

## Redux Brainstorm

REDUX
store 
- posts: {
      id : {
        title: string,
        descripton: string,
        content: string,
        comments: [ {id, text}, ... ]
      }
    }

actions/dispatch
- ADD_POST
- EDIT_POST
- DELETE_POST
- ADD_COMMENT
- DELETE_COMMENT

GOAL: Figure out what needs to be connected to props, and what needs to be connected to dispatch

### Home (props)
store.posts

### BlogPost (props & dispatch)
store.posts
EDIT_POST
DELETE_POST
ADD_COMMENT
DELETE_COMMENT

### BlogForm (dispatch)
ADD_POST

---

### Part II: Adding Comments
BlogPost component
- list all comments in the order they were made
- delete button onClick = invoke deleteComment
- form for adding new comment

App passes down this.state.blogs which looks like
blogs: {
      id : {
        title: string,
        descripton: string,
        content: string,
        comments: [ {id, text}, ... ]
      }
    }

so in our BlogPost we do:
let { id, blogs } = this.props;
let { title, description, content, comments } = blogs[id];
where comments is an array

when we render we loop through comments and create <button><li> for each comment

--

var comments = [
  {1: "test 1"},
  {2: "test 2"}, 
  {3: "test 3"}
]

// figuing out delete
var id = "2"

comments.filter(function(c){
  console.log("c is: " c);
  console.log("Object.keys(c) is: ", Object.keys(c));
}))

comments.filter(c => Object.keys(c) !== id) //  [ {1: "test a"}, {3: "test c"}]



TODO:
App 
- create deleteComment, pass this down to BlogPost
- update state to have comment array

BlogPost
- destructure to get comment array


3. new comment form

---

### DONE Part I: Initial React Component Plan
Components
###index.js
<BrowserRouter><App>

###NavBar
- "/" => Home
- "/new" => NewBlogForm

###App
- NavBar
- Routes
    * "/" => <Home blogs={this.state.blogs}/>
    * "/:id" => <BlogPost id = {rtProps.match.params.id} {this.editPost} {this.deletePost}/>
    * "/new" => <BlogForm {this.addPost}>

Form submit
- new (this.addPost)
- edit (this.editPost, this.blogContents)

- state holds blog content = {
    id : {
        title: string
        content: string
    }
}
- has methods that are passed down to NewBlogForm & BlogPost 
    - addPost (passed to NewBlogForm)
    - deletePost (passed to BlogPost)
    - editPost (passed to BlogPost)

###Home
- Map through this.props.blogs and creates Cards, whose titles are links to "/:id"

###BlogForm - (needs rtProps.history, addPost method) 
NEW POST MODE
this.props.add 
EDIT POST MODE
this.props.edit
this.props.content

- handleChange
- handleSubmit => invoke prop function (Blogs addPost) to add post to Parent state 
Two buttons
- Save, history.push("/")
- Cancel, history.push("/") OR redirect

###BlogPost (needs editPost and deletePost method)
- props: id, edit, delete, blogs
- Content <h1><p>
- Edit button => invoke prop function (Blogs editPost) to edit post in Parent state
- Delete button => invoke prop fuction (Blogs deletePost) to delete post from Parent state
- props = blog content from parent Blogs
- state = {
    editing: false/true
}

rendered content is dependent on a flag?
edit --> show edit form (populated with current blog contents)

---

Questions for later
* In the blog/edit form component problem statement has "this does not need to be routed differently (the url should stay the same)." - why is it so important that its not routed differently?

